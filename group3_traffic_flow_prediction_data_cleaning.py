# -*- coding: utf-8 -*-
"""Group3_Traffic_Flow_Prediction_data_cleaning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KVlO4hFPDgqVtFb3NuZUHQjUQuv_fvKF
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

# Load data
df = pd.read_csv("traffic_weather_full2020.csv")
df.head()

df.info()

"""### Data Processing"""

wind_speed = df['Wind Speed'].unique()
wind_speed

wind_gust = df['Wind Gust'].unique()
wind_gust

# Define the function for extracting float numbers
def extract_float(value, string):
    return float(str(value).strip().replace(string, ''))

# Extract number from 'Wind Speed' and 'Wind Gust' columns and then convert to float
df['Wind Speed'] = df['Wind Speed'].apply(lambda x: extract_float(x, 'mph'))
df['Wind Gust'] = df['Wind Gust'].apply(lambda x: extract_float(x, 'mph'))

# Extract number from 'Dew Point' and 'Temperature' and then convert to float
df['Temperature'] = df['Temperature'].apply(lambda x: extract_float(x, 'F'))
df['Dew Point'] = df['Dew Point'].apply(lambda x: extract_float(x, 'F'))

df.head()

# Check if '5 Minutes' and 'Hour' columns are identical
are_columns_identical = (df['5 Minutes'] == df['Hour']).all()

print(f"Are the '5 Minutes' and 'Hour' columns identical? {are_columns_identical}")

# Convert the '5 Minutes' column to datetime
df['5 Minutes'] = pd.to_datetime(df['5 Minutes'], errors='coerce')

# Keep only the hour in the 'Hour' colum
df['Hour'] = df['5 Minutes'].dt.hour

df['Day_of_Month'] = df['5 Minutes'].dt.day

# Drop unrelavant column 'Time'
df = df.drop(columns=['Time', 'Day'])

"""### Handling Missing Values"""

# Remove duplicates
df.drop_duplicates(inplace=True)

print(f"Missing values percentage (%):")
df.isnull().sum()/len(df) * 100

# Fill NA values with the last known value (forward fill)
df['Wind'] = df['Wind'].ffill()
df['Condition'] = df['Condition'].ffill()

print(f"Missing values percentage (%) after imputation:")
df.isnull().sum() / len(df) * 100

df.info()

"""### Feature Engineering

#### Creating lag features
"""

# Create lag features (for previous 1, 2, and 3 intervals)
df['Flow_Lag1'] = df['Flow'].shift(1)
df['Flow_Lag2'] = df['Flow'].shift(2)
df['Flow_Lag3'] = df['Flow'].shift(3)

# Drop rows with NaN values in the lag features
df = df.dropna(subset=['Flow_Lag1', 'Flow_Lag2', 'Flow_Lag3'])

df.isnull().sum()

plt.figure(figsize=(10, 8))
corr_matrix = df[['Flow', '(mph)', 'Hour',
       'Temperature', 'Dew Point', 'Humidity', 'Wind Speed',
       'Wind Gust', 'Pressure', 'Precip.', 'Day_of_Month',
       'Flow_Lag1', 'Flow_Lag2', 'Flow_Lag3']].corr()
sns.heatmap(corr_matrix, annot=True, center=0, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heatmap of Numerical Variables')
plt.show()

"""lag features (representing previous traffic flow values) show a strong correlation with current flow, highlighting the time-dependent nature of traffic and the importance of incorporating past flow data."""

corr_matrix

"""#### Converting categorical columns into numerical"""

wind = df['Wind'].unique()
wind

condition = df['Condition'].unique()
condition

# Importing necessary library
from sklearn.preprocessing import OneHotEncoder

# Step 1: Create separate instances of OneHotEncoder for Wind and Condition
encoder_wind = OneHotEncoder(sparse_output=False)  # Replaced `sparse` with `sparse_output`
encoder_condition = OneHotEncoder(sparse_output=False)  # Replaced `sparse` with `sparse_output`

# Step 2: Apply One-Hot Encoding to 'Wind' and 'Condition'
wind_encoded = encoder_wind.fit_transform(df[['Wind']])
condition_encoded = encoder_condition.fit_transform(df[['Condition']])

# Step 3: Convert back to DataFrame with appropriate column names
wind_encoded_df = pd.DataFrame(wind_encoded, columns=encoder_wind.get_feature_names_out(['Wind']))
condition_encoded_df = pd.DataFrame(condition_encoded, columns=encoder_condition.get_feature_names_out(['Condition']))

# Reset index of the encoded DataFrames
wind_encoded_df.reset_index(drop=True, inplace=True)
condition_encoded_df.reset_index(drop=True, inplace=True)
df.reset_index(drop=True, inplace=True)

# Concatenate DataFrames again
df_encoded = pd.concat([df, wind_encoded_df, condition_encoded_df], axis=1)


# Step 5: Drop the original 'Wind' and 'Condition' columns
df_encoded.drop(['Wind', 'Condition'], axis=1, inplace=True)

# Check the first few rows of the new dataframe
df_encoded.head()

# Save the cleaned data for subsequent analysis
df_encoded.to_csv('traffic_weather_full2020_cleaned.csv', index=False)